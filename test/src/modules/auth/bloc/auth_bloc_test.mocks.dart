// Mocks generated by Mockito 5.4.6 from annotations
// in kartia/test/src/modules/auth/bloc/auth_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:firebase_auth/firebase_auth.dart' as _i5;
import 'package:kartia/src/core/services/log.service.dart' as _i6;
import 'package:kartia/src/modules/auth/models/user.model.dart' as _i4;
import 'package:kartia/src/modules/auth/repositories/auth.repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AuthRepositoryInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepositoryInterface extends _i1.Mock
    implements _i2.AuthRepositoryInterface {
  MockAuthRepositoryInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i4.UserModel?> get authStateChanges =>
      (super.noSuchMethod(
            Invocation.getter(#authStateChanges),
            returnValue: _i3.Stream<_i4.UserModel?>.empty(),
          )
          as _i3.Stream<_i4.UserModel?>);

  @override
  bool get isSignedIn =>
      (super.noSuchMethod(Invocation.getter(#isSignedIn), returnValue: false)
          as bool);

  @override
  _i3.Future<_i4.UserModel?> signInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmailAndPassword, [], {
              #email: email,
              #password: password,
            }),
            returnValue: _i3.Future<_i4.UserModel?>.value(),
          )
          as _i3.Future<_i4.UserModel?>);

  @override
  _i3.Future<_i4.UserModel?> createUserWithEmailAndPassword({
    required String? email,
    required String? password,
    String? displayName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createUserWithEmailAndPassword, [], {
              #email: email,
              #password: password,
              #displayName: displayName,
            }),
            returnValue: _i3.Future<_i4.UserModel?>.value(),
          )
          as _i3.Future<_i4.UserModel?>);

  @override
  _i3.Future<_i4.UserModel?> signInAnonymously() =>
      (super.noSuchMethod(
            Invocation.method(#signInAnonymously, []),
            returnValue: _i3.Future<_i4.UserModel?>.value(),
          )
          as _i3.Future<_i4.UserModel?>);

  @override
  _i3.Future<void> verifyPhoneNumber({
    required String? phoneNumber,
    required dynamic Function(_i5.PhoneAuthCredential)? verificationCompleted,
    required dynamic Function(_i5.FirebaseAuthException)? verificationFailed,
    required dynamic Function(String, int?)? codeSent,
    required dynamic Function(String)? codeAutoRetrievalTimeout,
    Duration? timeout = const Duration(seconds: 60),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#verifyPhoneNumber, [], {
              #phoneNumber: phoneNumber,
              #verificationCompleted: verificationCompleted,
              #verificationFailed: verificationFailed,
              #codeSent: codeSent,
              #codeAutoRetrievalTimeout: codeAutoRetrievalTimeout,
              #timeout: timeout,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i4.UserModel?> signInWithPhoneNumber({
    required String? verificationId,
    required String? smsCode,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithPhoneNumber, [], {
              #verificationId: verificationId,
              #smsCode: smsCode,
            }),
            returnValue: _i3.Future<_i4.UserModel?>.value(),
          )
          as _i3.Future<_i4.UserModel?>);

  @override
  _i3.Future<void> sendPasswordResetEmail({required String? email}) =>
      (super.noSuchMethod(
            Invocation.method(#sendPasswordResetEmail, [], {#email: email}),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateUserProfile({String? displayName, String? photoURL}) =>
      (super.noSuchMethod(
            Invocation.method(#updateUserProfile, [], {
              #displayName: displayName,
              #photoURL: photoURL,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updatePassword({required String? newPassword}) =>
      (super.noSuchMethod(
            Invocation.method(#updatePassword, [], {#newPassword: newPassword}),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> sendEmailVerification() =>
      (super.noSuchMethod(
            Invocation.method(#sendEmailVerification, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteAccount() =>
      (super.noSuchMethod(
            Invocation.method(#deleteAccount, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [LogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogService extends _i1.Mock implements _i6.LogService {
  MockLogService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void trace(String? message) => super.noSuchMethod(
    Invocation.method(#trace, [message]),
    returnValueForMissingStub: null,
  );

  @override
  void debug(String? message) => super.noSuchMethod(
    Invocation.method(#debug, [message]),
    returnValueForMissingStub: null,
  );

  @override
  void info(String? message) => super.noSuchMethod(
    Invocation.method(#info, [message]),
    returnValueForMissingStub: null,
  );

  @override
  void warning(String? message) => super.noSuchMethod(
    Invocation.method(#warning, [message]),
    returnValueForMissingStub: null,
  );

  @override
  void error(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#error, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void fatal(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#fatal, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );
}
